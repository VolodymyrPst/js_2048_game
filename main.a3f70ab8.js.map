{"version":3,"sources":["scripts/main.js"],"names":["startBtn","document","querySelector","score","gameScore","rows","querySelectorAll","mes","tableSize","arrOfNumbers","moves","maxNum","noEmpty","hasEmpty","item","Math","max","innerHTML","i","j","randomWithProbability","notRandomNumbers","floor","random","length","randomNum","x","y","value","x1","y1","paint","k","cells","innerText","classList","filterZero","row","clearRow","filter","num","slide","push","addEventListener","e","target","toggle","textContent","Directions","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","slideLeft","newRow","slideRight","reverse","slideUp","slideDown","fieldChange","fieldGame","fieldCopy","map","arr","slice","code"],"mappings":"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","file":"main.a3f70ab8.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startBtn = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\nconst gameScore = document.querySelector('.game-score');\nconst rows = document.querySelectorAll('.field-row');\nconst mes = document.querySelector('.message-container');\nconst tableSize = 4;\n\nlet arrOfNumbers = [\n  ['', '', '', ''],\n  ['', '', '', ''],\n  ['', '', '', ''],\n  ['', '', '', ''],\n];\nlet moves = 0;\nlet maxNum = 0;\nlet noEmpty = false;\n\nscore.innerText = maxNum;\n\nstartBtn.addEventListener('click', (e) => {\n  e.target.classList.toggle('restart');\n\n  if (e.target.textContent === 'Start') {\n    e.target.textContent = 'Restart';\n\n    mes.innerHTML = `<p class=\"message message-start\">\n    Press \"Start\" to begin game. Good luck!</p>`;\n\n    maxNum = 0;\n    noEmpty = false;\n    score.innerText = maxNum;\n    randomNum();\n    paint();\n  } else {\n    e.target.textContent = 'Start';\n\n    mes.innerHTML = `<p class=\"message message-start\">\n    Press \"Start\" to begin game. Good luck!</p>`;\n\n    arrOfNumbers = [\n      ['', '', '', ''],\n      ['', '', '', ''],\n      ['', '', '', ''],\n      ['', '', '', ''],\n    ];\n    maxNum = 0;\n    noEmpty = false;\n    score.innerText = maxNum;\n    moves = 0;\n    paint();\n  }\n});\n\nfunction hasEmpty() {\n  for (const item of arrOfNumbers) {\n    if (Math.max(...item) >= 2048) {\n      mes.innerHTML = `<p class=\"message message-win\">\n      Winner! Congrats! You did it!</p>`;\n    }\n  }\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (arrOfNumbers[i][j] === '') {\n        return true;\n      }\n    }\n  }\n\n  noEmpty = true;\n\n  return false;\n}\n\nfunction randomWithProbability() {\n  const notRandomNumbers = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n  const idx = Math.floor(Math.random() * notRandomNumbers.length);\n\n  return notRandomNumbers[idx];\n}\n\nfunction randomNum() {\n  let x;\n  let y;\n  const value = randomWithProbability();\n\n  if (moves === 0) {\n    x = Math.floor(Math.random() * 4);\n    y = Math.floor(Math.random() * 4);\n\n    const x1 = Math.floor(Math.random() * 4);\n    const y1 = Math.floor(Math.random() * 4);\n\n    arrOfNumbers[x][y] = value;\n    arrOfNumbers[x1][y1] = value;\n    moves++;\n  } else {\n    x = Math.floor(Math.random() * 4);\n    y = Math.floor(Math.random() * 4);\n\n    while (arrOfNumbers[x][y] !== '') {\n      x = Math.floor(Math.random() * 4);\n      y = Math.floor(Math.random() * 4);\n    }\n  }\n\n  arrOfNumbers[x][y] = value;\n  moves += 1;\n};\n\nfunction paint() {\n  if (noEmpty) {\n    mes.innerHTML = `<p class=\"message message-lose\">\n    You lose! Restart the game?</p>`;\n\n    return;\n  }\n\n  for (let i = 0; i < arrOfNumbers.length; i++) {\n    for (let k = 0; k < arrOfNumbers[i].length; k++) {\n      const item = arrOfNumbers[i][k];\n\n      if (item !== '') {\n        rows[i].cells[k].innerText = item;\n        rows[i].cells[k].classList = `field-cell field-cell--${item}`;\n      }\n\n      if (item === '') {\n        rows[i].cells[k].innerText = '';\n        rows[i].cells[k].classList = `field-cell`;\n      }\n    }\n  }\n};\n\nfunction filterZero(row) {\n  const clearRow = row.filter(num => num !== '');\n\n  return clearRow;\n};\n\nfunction slide(row) {\n  let clearRow = filterZero(row);\n\n  for (let i = 0; i < clearRow.length - 1; i++) {\n    if (clearRow[i] === clearRow[i + 1]) {\n      clearRow[i] *= 2;\n      maxNum += clearRow[i];\n      clearRow[i + 1] = '';\n      gameScore.innerText = maxNum;\n    }\n  }\n\n  clearRow = filterZero(clearRow);\n\n  while (clearRow.length < 4) {\n    clearRow.push('');\n  }\n\n  return clearRow;\n}\n\nconst Directions = {\n  ArrowLeft: 'ArrowLeft',\n  ArrowRight: 'ArrowRight',\n  ArrowUp: 'ArrowUp',\n  ArrowDown: 'ArrowDown',\n};\n\ndocument.addEventListener('keyup', (e) => {\n  const fieldCopy = arrOfNumbers.map(arr => arr.slice());\n\n  if (e.code === Directions.ArrowLeft) {\n    slideLeft();\n  }\n\n  if (e.code === Directions.ArrowRight) {\n    slideRight();\n  }\n\n  if (e.code === Directions.ArrowUp) {\n    slideUp();\n  }\n\n  if (e.code === Directions.ArrowDown) {\n    slideDown();\n  }\n\n  if (fieldChange(arrOfNumbers, fieldCopy)) {\n    randomNum();\n  }\n\n  paint();\n});\n\nfunction slideLeft() {\n  for (let i = 0; i < 4; i++) {\n    const row = arrOfNumbers[i];\n    const newRow = slide(row);\n\n    arrOfNumbers[i] = newRow;\n  }\n\n  paint();\n};\n\nfunction slideRight() {\n  for (let i = 0; i < 4; i++) {\n    const row = arrOfNumbers[i];\n\n    row.reverse();\n\n    const newRow = slide(row);\n\n    newRow.reverse();\n\n    arrOfNumbers[i] = newRow;\n  }\n\n  paint();\n};\n\nfunction slideUp() {\n  for (let i = 0; i < 4; i++) {\n    const row = [\n      arrOfNumbers[0][i],\n      arrOfNumbers[1][i],\n      arrOfNumbers[2][i],\n      arrOfNumbers[3][i],\n    ];\n\n    const newRow = slide(row);\n\n    arrOfNumbers[0][i] = newRow[0];\n    arrOfNumbers[1][i] = newRow[1];\n    arrOfNumbers[2][i] = newRow[2];\n    arrOfNumbers[3][i] = newRow[3];\n  }\n\n  paint();\n};\n\nfunction slideDown() {\n  for (let i = 0; i < 4; i++) {\n    const row = [\n      arrOfNumbers[0][i],\n      arrOfNumbers[1][i],\n      arrOfNumbers[2][i],\n      arrOfNumbers[3][i],\n    ];\n\n    row.reverse();\n\n    const newRow = slide(row);\n\n    newRow.reverse();\n\n    arrOfNumbers[0][i] = newRow[0];\n    arrOfNumbers[1][i] = newRow[1];\n    arrOfNumbers[2][i] = newRow[2];\n    arrOfNumbers[3][i] = newRow[3];\n  }\n\n  paint();\n};\n\nfunction fieldChange(fieldGame, fieldCopy) {\n  if (moves === 2) {\n    return true;\n  }\n\n  for (let i = 0; i < tableSize; i++) {\n    for (let k = 0; k < tableSize; k++) {\n      if (fieldGame[i][k] !== fieldCopy[i][k]) {\n        return true;\n      }\n    }\n  }\n\n  if (!hasEmpty()) {\n    return;\n  }\n\n  return false;\n}\n"]}